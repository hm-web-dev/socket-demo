const path = require("path");
const sqlite = require("sqlite3").verbose();
const dbFile = path.join(__dirname, "socket-game.db");
const db = new sqlite.Database(dbFile, (error) => {
    if (error) return console.error(error.message);
    console.log(`Connected to database ${dbFile}`);
});

/* ----- CREATE ROOM ---- */
const createRoom = async (req, res) => {
    // first check if too many rooms are active
    try {
        await getNumRooms().then((count) => {
            if (count >= 30) {
                console.log("Too many active rooms, deleting old rooms...");
                throw new Error("Too many active rooms");
            }
        })
    } catch (error) {
        console.error(error.message);
        res.status(503).json({ error: "Too many active rooms, please try again later." });
        deleteOldRooms();
        return;
    }

    // create a random 6 letter alphabetical code 
    // we tkae the substring from 2 to 8 to skip the 0. generated by the random function.
    // take base 36 for 26 letters and 10 numbers
    const code = generateNewCode();
    // create a datetime object 1 hour from now
    const expiry_datetime = new Date();
    expiry_datetime.setHours(expiry_datetime.getHours() + 2);
    // create a room in the database with the code and expiry_datetime
    const query =
        `
    INSERT INTO room(code, expiry_date) 
    VALUES (?, ?)
    `
    db.run(query, [
        code, expiry_datetime.toISOString()
    ], (err) => {
        if (err) {
            console.error(err.message);
            // TODO: log errors to db 
            // try again with new code if not unique 
            createRoom(req, res);
            res.status(400).json({ error: err.message });
        }
        else {
            // apidoc says to not use callback style to load this.lastID
            // but it works anyway! 
            console.log(`Created room ${code} expiring at ${expiry_datetime.toISOString()}`);
            res.json({ code: code });
        }
    });
}

/* ----- GET ROOM ---- */
const getRoom = async (room) => {
    // get the room from the database
    return new Promise((resolve, reject) => {
        const query = `
    SELECT * FROM room
    WHERE code = ?
    `
        db.get(query, [room], (error, row) => {
            if (error) {
                console.error(error.message);
                reject(403)
            }
            else if (row) {
                // if the room is still active, send the room data to the client
                if (new Date(row.expiry_date) > new Date()) {
                    resolve(row);
                }
                else {
                    reject(500)
                }
            }
            else {
                reject(404)
            }
        });
    });
}

/* ----- GET NUM ROOMS ---- */
const getNumRooms = () => {
    const query = `
    SELECT COUNT(*) as count FROM room
    WHERE expiry_date > datetime('now')
    `
    return new Promise((resolve, reject) => {
        db.get(query, (error, row) => {
            if (error) {
                console.error(error.message);
                reject(error);
            }
            else {
                resolve(row.count);
            }
        });
    });
}

/* ----- DELETE OLD ROOMS ---- */
const deleteOldRooms = () => {
    // delete rooms that are older than 1 day
    const query = `
    DELETE FROM room
    WHERE expiry_date < datetime('now', '-1 day')
    `
    db.run(query, (error) => {
        if (error) {
            console.error(error.message);
        }
        else {
            console.log("Deleted old rooms");
        }
    });
}

/* ----- WORD GENERATOR ---- */
const getWord = async () => {
    // note: fetch is native but has two "thens", that's annoying. I'd rather use axios. 
    // TODO: api is not working, will have to find another one. 

    // const response = await
    //     fetch("http://random-word-form.herokuapp.com/random/noun?count=100");
    // const words = await response.json();
    const words = [
        "horse", "door", "song", "trip", "backbone", "bomb", "round", "treasure", "garbage", "park", "pirate", "ski", "state", "whistle", "palace", "baseball", "coal", "queen", "dominoes", "photograph", "computer", "hockey", "aircraft", "hot", "dog", "salt", "and", "pepper", "key", "iPad", "whisk", "frog", "lawnmower", "mattress", "pinwheel", "cake", "circus", "battery", "mailman", "cowboy", "password", "bicycle", "skate", "electricity", "lightsaber", "thief", "teapot", "deep", "spring", "nature", "shallow", "toast", "outside", "America", "roller", "blading", "gingerbread", "man", "bowtie", "half", "spare", "wax", "light", "bulb", "platypus", "music"];
    // from https://www.thegamegal.com/printables/
    return words[Math.floor(Math.random() * words.length)];
}


// helper functions
const generateNewCode = () => {
    return Math.random().toString(36).substring(2, 8);
}


module.exports = {
    createRoom,
    getRoom,
    getWord
}
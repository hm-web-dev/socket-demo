const path = require("path");
const sqlite = require("sqlite3").verbose();
const dbFile = path.join(__dirname, "socket-game.db");
const db = new sqlite.Database(dbFile, (error) => {
    if (error) return console.error(error.message);
    console.log(`Connected to database ${dbFile}`);
});

/* ----- CREATE ROOM ---- */
const createRoom = (req, res) => {
    // create a random 6 letter alphabetical code 
    // we tkae the substring from 2 to 8 to skip the 0. generated by the random function.
    // take base 36 for 26 letters and 10 numbers
    const code = generateNewCode();
    // create a datetime object 1 hour from now
    const expiry_datetime = new Date();
    expiry_datetime.setHours(expiry_datetime.getHours() + 1);
    // create a room in the database with the code and expiry_datetime
    const query =
        `
    INSERT INTO room(code, expiry_date) 
    VALUES (?, ?)
    `
    db.run(query, [
        code, expiry_datetime.toISOString()
    ], (err) => {
        
        if (err) {
            
            console.error(err.message);
            // TODO: log errors to db 
            
            // try again if not unique 
            createRoom(req, res);
            res.status(400).json({ error: err.message });
        }
        else {
            // apidoc says to not use callback style to load this.lastID
            // but it works anyway! 
            res.json({ code: code });
        }
    });
}

/* ----- GET ROOM ---- */
const getRoom = (req, res) => {
    // get the room from the database
    const query =
        `
    SELECT * FROM room
    WHERE code = ?
    `
    db.get(query, [req.params.room], (error, row) => {
        if (error) {
            console.error(error.message);
            res.status(500).json({ error: error.message });
        }
        else if (row) {
            // if the room is still active, send the room data to the client
            if (new Date(row.expiry_date) > new Date()) {
                res.json(row);
            }
            else {
                // if the room is not active, send a 500 error
                res.status(500).json({ error: "ROOM EXPIRED" });
            }
        }
        else {
            // if the room does not exist, send a 404 error
            res.status(404).json({ error: "Room not found. Try again!" });
        }
    });

}


// helper functions

const generateNewCode = () => {
    return Math.random().toString(36).substring(2, 8);
}


module.exports = {
    createRoom,
    getRoom
}